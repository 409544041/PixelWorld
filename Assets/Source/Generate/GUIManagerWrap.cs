//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GUIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GUIManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("GetUIScale", GetUIScale);
		L.RegFunction("ShowWindow", ShowWindow);
		L.RegFunction("HideWindow", HideWindow);
		L.RegFunction("IsWindowOpen", IsWindowOpen);
		L.RegFunction("ShowAlert", ShowAlert);
		L.RegFunction("HideAlert", HideAlert);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GUIManager o = GUIManager.GetInstance();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GUIManager obj = (GUIManager)ToLua.CheckObject(L, 1, typeof(GUIManager));
			float o = obj.GetUIScale();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GUIManager obj = (GUIManager)ToLua.CheckObject(L, 1, typeof(GUIManager));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			UnityEngine.RectTransform o = obj.ShowWindow(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(GUIManager), typeof(UnityEngine.GameObject)))
			{
				GUIManager obj = (GUIManager)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.HideWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(GUIManager), typeof(UnityEngine.RectTransform)))
			{
				GUIManager obj = (GUIManager)ToLua.ToObject(L, 1);
				UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.ToObject(L, 2);
				obj.HideWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(GUIManager), typeof(string)))
			{
				GUIManager obj = (GUIManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.HideWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GUIManager.HideWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsWindowOpen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GUIManager obj = (GUIManager)ToLua.CheckObject(L, 1, typeof(GUIManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsWindowOpen(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowAlert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GUIManager obj = (GUIManager)ToLua.CheckObject(L, 1, typeof(GUIManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			AlertCallback arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (AlertCallback)ToLua.CheckObject(L, 4, typeof(AlertCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(AlertCallback), func) as AlertCallback;
			}

			obj.ShowAlert(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideAlert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GUIManager obj = (GUIManager)ToLua.CheckObject(L, 1, typeof(GUIManager));
			obj.HideAlert();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GUIManager obj = (GUIManager)ToLua.CheckObject(L, 1, typeof(GUIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite o = obj.LoadSprite(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

